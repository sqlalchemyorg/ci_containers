FROM jenkins_pythons

# NOTE: this is set in the config.yml file, not here
ARG sqlite_versions="0000_0000000"


# install mariadb packages, outside of centos packaging
#RUN \
#	yum module disable -y mariadb && \
#    curl -LsS https://downloads.mariadb.com/MariaDB/mariadb_repo_setup | bash -s --  && \
#    yum install -y MariaDB-devel MariaDB-client  MariaDB-shared


# install SQL Server client stuff
ENV ACCEPT_EULA="Y"

RUN \
	curl -L -O https://packages.microsoft.com/config/rhel/8/prod.repo && \
	mv prod.repo /etc/yum.repos.d/mssql-release.repo && \
	dnf install -y unixODBC unixODBC-devel redhat-rpm-config freetds freetds-devel msodbcsql18 mssql-tools18 msodbcsql17

# overwrite odbc.ini / freetds.conf
COPY odbc.ini /etc/odbc.ini
COPY freetds.conf /etc/freetds.conf


# mariadb
RUN dnf install -y mariadb mariadb-devel

# install postgresql client libs
RUN dnf install -y postgresql libpq libpq-devel

# install oracle xe to get client libraries
# libnsl: DPI-1047: 64-bit Oracle Client library cannot be loaded: "libnsl.so.1:
# this is part of glibc but may have been moved out to a legacy package as it
# seems to be up to libnsl.so.2 now
RUN \
	dnf install -y libaio-devel libnsl bc redhat-rpm-config && \
	mkdir /usr/local/src/oracle && \
	cd /usr/local/src/oracle && \
	curl -L -O https://jenkins.sqlalchemy.org/downloads/oracle-instantclient-basic-linuxx64.rpm && \
	dnf install -y /usr/local/src/oracle/oracle-instantclient-basic-linuxx64.rpm && \
	echo '' > /etc/profile.d/oracle_env.sh && \
	cd .. && rm -fr oracle

# dogpile.cache tests use redis, valkey, memcached on demand
RUN dnf install -y redis valkey memcached memcached-devel


# the SQLite we build here gets used in cPython via
# LD_LIBRARY_PATH set up in python_envs.sh.   the pythons themselves
# are built against regular sqlite-devel
COPY install_sqlite.sh /usr/local/src/install_sqlite.sh

RUN chmod 0755 /usr/local/src/install_sqlite.sh && \
	/usr/local/src/install_sqlite.sh "${sqlite_versions}"


# the container will mount /etc/hosts from the host

WORKDIR /usr/local/jenkins

RUN curl -L -O https://jenkins.sqlalchemy.org/jnlpJars/agent.jar

VOLUME /usr/local/jenkins /home/jenkins

# optional - stick a new python here to get one build without
# running all of dockerfile.pythons
# im sure there are better ways to organize all this but they are escaping
# me at the moment
# RUN /usr/local/src/install_cpython.sh "3.14.0b2"

# try to get rid of huge number of defunct processes
# https://github.com/adoptium/ci-jenkins-pipelines/issues/1066#issuecomment-2205717795
# Add Tini
# here's an explainer: https://github.com/krallin/tini/issues/8#issuecomment-146135930
# tl;dr; PID 1 in a linux system is supposed to reap zombies.  when we set the jenkins
# agent.jar as PID 1 as occurs in a container, it does not do this job since it's not an
# init process.  so we put tini there instead which reaps the zombies and agent.jar becomes pid 2.
ENV TINI_VERSION v0.19.0
ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /tini
RUN chmod +x /tini
ENTRYPOINT ["/tini", "--", "/bin/java", "-jar", "/usr/local/jenkins/agent.jar"]

# ENTRYPOINT ["/bin/java", "-Dorg.jenkinsci.plugins.gitclient.Git.timeOut=5", "-jar", "/usr/local/jenkins/agent.jar"]
# ENTRYPOINT ["/bin/java", "-jar", "/usr/local/jenkins/agent.jar"]
